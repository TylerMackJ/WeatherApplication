{"version":3,"sources":["assets/components/Title.jsx","assets/components/Form.jsx","assets/components/Weather.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","React","Component","countryJson","require","Form","console","log","onSubmit","this","props","getWeather","type","name","placeholder","map","country","index","value","key","Weather","data","weatherData","city","temp","humidity","windspeed","winddir","clouds","error","API_KEY","App","state","county","_callee","e","location","call_type","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","isNaN","fetch","concat","then","res","json","_this","setState","sys","main","wind","speed","deg","all","catch","stop","components_Title","components_Form","components_Weather","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f96e11b5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Title extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Title\">\r\n                <h1>\r\n                    <b>Weather</b>\r\n                </h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nconst countryJson = require(\"../json/ISO3166\");\r\n\r\nclass Form extends React.Component {\r\n    componentWillMount() {\r\n        console.log(countryJson);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"Form\" onSubmit={this.props.getWeather}>\r\n                <input\r\n                    className=\"Location\"\r\n                    type=\"text\"\r\n                    name=\"location\"\r\n                    placeholder=\"City / Zipcode\"\r\n                />\r\n                <select\r\n                    className=\"Country\"\r\n                    name=\"country\"\r\n                    placeholder=\"Country\"\r\n                >\r\n                    {countryJson.map((country, index) => {\r\n                        return (\r\n                            <option value={country[\"alpha-2\"]} key={index}>\r\n                                {country.name}\r\n                            </option>\r\n                        );\r\n                    })}\r\n                </select>\r\n                <input type=\"submit\" value=\"Get Weather\" />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nclass Weather extends React.Component {\r\n    render() {\r\n        const data = this.props.weatherData;\r\n        return (\r\n            <div className=\"Weather\">\r\n                <div className=\"Text\">\r\n                    {data.city && data.country && (\r\n                        <p className=\"Location\">\r\n                            Getting weather for {data.city}, {data.country}\r\n                            <hr />\r\n                        </p>\r\n                    )}\r\n                    {data.temp && (\r\n                        <p className=\"Temp\">\r\n                            Temperature: {data.temp}°<hr />\r\n                        </p>\r\n                    )}\r\n                    {data.humidity && (\r\n                        <p className=\"Humidity\">\r\n                            Humidity: {data.humidity}%<hr />\r\n                        </p>\r\n                    )}\r\n                    {data.windspeed && data.winddir && (\r\n                        <p className=\"Wind\">\r\n                            Wind: Blowing {data.windspeed} mph at {data.winddir}\r\n                            °\r\n                            <hr />\r\n                        </p>\r\n                    )}\r\n                    {data.clouds && (\r\n                        <p className=\"Clouds\">Cloud Coverage: {data.clouds}%</p>\r\n                    )}\r\n                    {data.error && <p className=\"Error\">{data.error}</p>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\n\nimport Title from \"./assets/components/Title\";\nimport Form from \"./assets/components/Form\";\nimport Weather from \"./assets/components/Weather\";\n\nimport \"./assets/styles/css/default.min.css\";\n\nconst API_KEY = \"ca21dc061cfbfac4c0dd566e7366af0b\";\n\nclass App extends React.Component {\n    state = {\n        city: \"\",\n        county: \"\",\n        temp: \"\",\n        humidity: \"\",\n        windspeed: \"\",\n        winddir: \"\",\n        clouds: \"\",\n        error: \"\"\n    };\n\n    getWeather = async e => {\n        e.preventDefault();\n        const location = e.target.elements.location.value;\n        const country = e.target.elements.country.value;\n        const call_type = isNaN(location) ? \"q\" : \"zip\";\n\n        await fetch(\n            `https://api.openweathermap.org/data/2.5/weather?${call_type}=${location},${country}&APPID=${API_KEY}&units=imperial`\n        )\n            .then(res => res.json())\n            .then(data =>\n                this.setState({\n                    city: data.name,\n                    country: data.sys.country,\n                    temp: data.main.temp,\n                    humidity: data.main.humidity,\n                    windspeed: data.wind.speed,\n                    winddir: data.wind.deg,\n                    clouds: data.clouds.all,\n                    error: \"\"\n                })\n            )\n            .catch(error =>\n                this.setState({\n                    city: \"\",\n                    country: \"\",\n                    temp: \"\",\n                    humidity: \"\",\n                    windspeed: \"\",\n                    winddir: \"\",\n                    clouds: \"\",\n                    error: \"Enter a valid location!\"\n                })\n            );\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Title />\n                <Form getWeather={this.getWeather} />\n                <Weather weatherData={this.state} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}